"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_6ph7e#l&q%1hg^m+lfmz68@2%efn9cb_z1^=4nomevt+mt3(f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'bio_encrypt_service',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'bio_encrypt_service.middleware.ClassMiddleware'
]

ROOT_URLCONF = 'BioEncryptService.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'BioEncryptService.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Use JWT for authentication
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Default permission for all views
    ],
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),  # Access token lifetime
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),     # Refresh token lifetime
    'ROTATE_REFRESH_TOKENS': False,                 # Whether to rotate refresh tokens
    'BLACKLIST_AFTER_ROTATION': True,               # Blacklist old tokens after rotation
    'UPDATE_LAST_LOGIN': True,                      # Update the user's last login time
    'ALGORITHM': 'HS256',                           # Encryption algorithm
    'SIGNING_KEY': SECRET_KEY,                      # Use Django's SECRET_KEY for signing
    'VERIFYING_KEY': None,                          # No verifying key for HS256
    'AUTH_HEADER_TYPES': ('Bearer',),               # Authorization header type
    'USER_ID_FIELD': 'id',                          # Field to use as the user ID
    'USER_ID_CLAIM': 'user_id',                     # Claim to use as the user ID in the token
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),  # Token classes
}

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default backend
]
ALLOWED_HOSTS = ['*']  # Allow all hosts (for development only)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',  # Adjust the level as needed (DEBUG, INFO, WARNING, ERROR, CRITICAL)
            'class': 'logging.FileHandler',
            'filename': 'log_file.log',  # Specify your log file name
            'formatter': 'verbose',  # Use the verbose formatter
        },
    },
    'loggers': {
        'bio_encrypt_service': {  
            'handlers': ['file'],
            'level': 'DEBUG',  # Adjust the level as needed
            'propagate': False,  # Prevent logs from being sent to the root logger
        },
    },
}


# Custom configuration
KEY_FILE = os.getenv("KEY_FILE", "bio_encrypt_service/assets/Key/public_key")
HASHING_DIRECTORY = os.getenv("HASHING_DIRECTORY", "bio_encrypt_service/assets/hash")

HASHING_PARAM = {
    'n_dimensions': int(os.getenv("HASHING_N_DIMENSIONS", 128)),
    'n_tables': int(os.getenv("HASHING_N_TABLES", 5)),
    'n_projections': int(os.getenv("HASHING_N_PROJECTIONS", 15)),
}

ENCRYPTION_CLASSES_DIRECTORY = 'bio_encrypt_service.security'
ENCRYPTION_CLASSES = {
    "CKKS": f'{ENCRYPTION_CLASSES_DIRECTORY}.ckks_strategy.CKKSStrategy',
    "BFV": f'{ENCRYPTION_CLASSES_DIRECTORY}.bfv_strategy.BFVStrategy',
}

HASHING_CLASSES_DIRECTORY = 'bio_encrypt_service.hashing'
HASHING_CLASSES = {
    "LSH": f'{HASHING_CLASSES_DIRECTORY}.lsh_strategy.LSHStrategy',
}